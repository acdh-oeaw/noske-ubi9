name: workflows starter
# env: is empty, see setup-env and the outputs there
on:
  push: {}
  workflow_dispatch: {}
jobs:
  setup_workflow_env:
    runs-on: ubuntu-latest
# Optionally specify the environment that should be used on this branch
    # environment: review/dev
    outputs:
# It seems you have to specify the environment twice (passed to reusable workflow)
# as there is no way yet to get the active environment
      # environment: review/dev
# or see the switch on ref_name script below
      environment: ${{ steps.get_environment_from_git_ref.outputs.environment }}
      environment_short: ${{ steps.get_environment_from_git_ref.outputs.environment_short }}
      image_name: noske
# Please note that the next line only works correctly with repositories that don't contain
# upper case characters. If you have such a repo name please replace ${{ github.repository }}
# with org/repo-name (all lower case).
# E. g. ACDH-OEAW/OpenAtlas-Discovery -> acdh-oeaw/openatlas-discovery
      registry_root: ghcr.io/${{ github.repository }}/
      default_port: "5000"
# Usually you don't deal with all commits since the repository was created.
# Increase if you e.g don't find a tag you want to display in the application
      fetch-depth: 10
      submodules: "true"
#      herokuish_base_image: ghcr.io/acdh-oeaw/herokuish-for-cypress/main:latest-22
      APP_NAME: noske
# This together with the branch name is also used as the namespace to deploy to
      APP_ROOT: "/"     
      # SERVICE_ID: "99999" # Better use GtiHub environment variables for this
      # PUBLIC_URL: "https://some-stuff.acdh-ch-dev.oeaw.ac.at" # Use GitHub environment variables for a stable custom public url
      # POSTGRES_ENABLED: "false" # needs to be set to true to enable a postgres db installed next to the deployed app
# You should not need to have to change anything below this line
#-----------------------------------------------------------------------------------------------------
    steps:
      - name: Get environment from git ref
        id: get_environment_from_git_ref
        run: |
          echo "Running on branch ${{ github.ref_name }}"
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production"
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "environment_short=prod" >> $GITHUB_OUTPUT
          else
            echo "environment=review/${{ github.ref_name }}"
            echo "environment=review/${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "environment_short=$(echo -n ${{ github.ref_name }} | sed 's/feat\(ure\)\{0,1\}[_/]//' | tr '_' '-' | tr '[:upper:]' '[:lower:]' | cut -c -63 )" >> $GITHUB_OUTPUT
          fi
  generate_workflow_vars:
    needs: [setup_workflow_env]
    environment:
      name: ${{ needs.setup_workflow_env.outputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate PUBLIC_URL if not set
        id: generate_public_url
        run: |
          kube_ingress_base_domain="${{ vars.KUBE_INGRESS_BASE_DOMAIN }}"
          public_url="${{ needs.setup_workflow_env.outputs.PUBLIC_URL || vars.PUBLIC_URL }}"
          if [ "${public_url}x" == 'x' ]
          then public_url=https://${{ needs.setup_workflow_env.outputs.environment_short }}.${kube_ingress_base_domain}
          fi
          echo "public_url=$public_url" >> $GITHUB_OUTPUT
    outputs:     
      PUBLIC_URL: ${{ steps.generate_public_url.outputs.public_url }}
  _1:
    needs: [setup_workflow_env, generate_workflow_vars]
    uses:  acdh-oeaw/gl-autodevops-minimal-port/.github/workflows/build-dockerfile-and-push-to-registry.yaml@main
    secrets: inherit
    with:
      platforms: "linux/amd64,linux/arm64"
      environment: ${{ needs.setup_workflow_env.outputs.environment }}
      registry_root: ${{ needs.setup_workflow_env.outputs.registry_root }}
      image_name: ${{ needs.setup_workflow_env.outputs.image_name }}
      default_port: ${{ needs.setup_workflow_env.outputs.default_port }}
      PUBLIC_URL: ${{ needs.generate_workflow_vars.outputs.PUBLIC_URL }}
      fetch-depth: ${{ fromJson(needs.setup_workflow_env.outputs.fetch-depth) }}
      submodules: ${{ needs.setup_workflow_env.outputs.submodules }}
  rpm-release:
      needs: [setup_workflow_env, generate_workflow_vars, _1]
      name: Create RPM Release
      permissions:
        contents: write
      if: github.ref_type == 'tag'
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@master
        
        - name: Create tags based on git data
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: |
              ${{ needs.setup_workflow_env.outputs.registry_root }}${{ needs.setup_workflow_env.outputs.image_name }}
            tags: |
              type=raw,value={{sha}}
        
        - name: Get RPMS
          run: |
            docker run --detach --rm --name noske $DOCKER_METADATA_OUTPUT_TAGS
            docker exec -u 0:0 noske /bin/bash -c 'cp /root/*.rpm /home/user; cp /root/noarch/*.rpm /home/user; cp /root/x86_64/*.rpm /home/user; chown -R www-data:www-data /home/user'
            docker cp noske:/home/user .
            docker stop noske 
        
        - uses: ncipollo/release-action@v1
          with:
            artifacts: "user/*.rpm"